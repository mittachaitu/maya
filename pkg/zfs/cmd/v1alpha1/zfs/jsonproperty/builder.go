/*
Copyright 2020 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package vjsonprop

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/maya/pkg/zfs/cmd/v1alpha1/bin"
	"github.com/pkg/errors"
)

type VolumeJSONProperty struct {
	// CLICommand needs to be executed
	CLICommand string

	//name of dataset on which snapshot should be taken
	Dataset string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error

	// Command  command needs to be executed
	Command string
}

// NewVolumeJSONProperty initilize the VolumeJSONProperty
func NewVolumeJSONProperty() *VolumeJSONProperty {
	return &VolumeJSONProperty{}
}

// WithCheck add given check to checks list
func (v *VolumeJSONProperty) WithCheck(check ...PredicateFunc) *VolumeJSONProperty {
	v.checks = append(v.checks, check...)
	return v
}

// WithCLICommand method fills the Property field of VolumeJSONProperty object.
func (v *VolumeJSONProperty) WithCLICommand(command string) *VolumeJSONProperty {
	v.CLICommand = command
	return v
}

// WithDataset method fills the Dataset field of VolumeJSONProperty object.
func (v *VolumeJSONProperty) WithDataset(Dataset string) *VolumeJSONProperty {
	v.Dataset = Dataset
	return v
}

// Validate is to validate generated VolumeJSONProperty object by builder
func (v *VolumeJSONProperty) Validate() *VolumeJSONProperty {
	for _, check := range v.checks {
		if !check(v) {
			v.err = errors.Wrapf(v.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return v
}

// Execute is to execute generated VolumeJSONProperty object
func (v *VolumeJSONProperty) Execute() ([]byte, error) {
	v = v.Build()

	// execute command here
	// #nosec
	return exec.Command(bin.BASH, "-c", v.Command).CombinedOutput()
}

// Build returns the VolumeJSONProperty object generated by builder
func (v *VolumeJSONProperty) Build() *VolumeJSONProperty {
	var c strings.Builder
	v = v.Validate()
	v.appendCommand(&c, bin.ZFS)

	v.appendCommand(&c, fmt.Sprintf(" %s ", v.CLICommand))

	v.appendCommand(&c, v.Dataset)

	v.Command = c.String()
	return v
}

// appendCommand append string to given string builder
func (v *VolumeJSONProperty) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		v.err = errors.Wrapf(v.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
